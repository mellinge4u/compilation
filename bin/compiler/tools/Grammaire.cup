package compiler.tools;

import java_cup.runtime.*;
import java.util.*;
import compiler.AbstractTree;
import compiler.Classe;
import compiler.Constante;
import compiler.Decl_champ;
import compiler.Decl_const;
import compiler.Declaration;
import compiler.Expression;
import compiler.Variable;
import compiler.instruct.Affect;
import compiler.instruct.Ecrire;
import compiler.instruct.EcrireChaine;
import compiler.instruct.EcrireExp;
import compiler.instruct.Instruction;
import compiler.instruct.Lire;
import compiler.operator.arithmetic.binary.OperatorMinus;
import compiler.operator.arithmetic.binary.OperatorMulti;
import compiler.operator.arithmetic.binary.OperatorPlus;
import compiler.operator.arithmetic.unary.OperatorUnaryMinus;
import compiler.operator.logical.binary.OperatorDiff;
import compiler.operator.logical.binary.OperatorEquals;
import compiler.operator.logical.binary.OperatorInferior;
import compiler.operator.logical.binary.OperatorSuperior;

action code {: /* vide pour le moment */
	    :} ;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    /* Change the method report_error so it will display the line and column of where the error
       occurred in the input as well as the reason for the error which is passed into the method
       in the String 'message'. */
	public void report_error(String message, Object info) {

		/* Create a StringBuffer called 'm' with the string 'Error' in it. */
		StringBuffer m = new StringBuffer("ERREUR");
		if (message.equals("Syntax error")) {
			m.append(" SYNTAXIQUE :");
			if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0) {
					m.append(" " + (s.left + 1));
					m.append(" : symbole " + getSymbole(s.sym) + " inattendu");
					System.err.println(m);
				}
			}
		}
	}

	/*
	 * Change the method report_fatal_error so when it reports a fatal error it
	 * will display the line and column number of where the fatal error occurred
	 * in the input as well as the reason for the fatal error which is passed
	 * into the method in the object 'message' and then exit.
	 */
	public void report_fatal_error(String message, Object info) {
		// report_error(message, info);
		System.exit(1);
	}

	public String getSymbole(int i) {
		String s = new String();
		switch (i) {
		case CodesLexicaux.EOF: {
			s = "fin de fichier (EOF)";
			break;
		}
		case CodesLexicaux.POINTVIRGULE: 	{s = ";";				break;}
		case CodesLexicaux.NOMBRE: 			{s = "nombre";			break;}
		case CodesLexicaux.OPPLUS: 			{s = "+";				break;}
		case CodesLexicaux.OPMOINS: 		{s = "-";				break;}
		case CodesLexicaux.OPMULT: 			{s = "*";				break;}
		case CodesLexicaux.OPDIFF: 			{s = "!=";				break;}
		case CodesLexicaux.OPEGAL: 			{s = "==";				break;}
		case CodesLexicaux.OPSUP: 			{s = ">";				break;}
		case CodesLexicaux.OPINF: 			{s = "<";				break;}
		case CodesLexicaux.PARO: 			{s = "(";				break;}
		case CodesLexicaux.PARF: 			{s = ")";				break;}
		case CodesLexicaux.SYMCLASSE: 		{s = "classe";			break;}
		case CodesLexicaux.FIN: 			{s = "fin";				break;}
		case CodesLexicaux.STATUS: 			{s = "status";			break;}
		case CodesLexicaux.TYPE: 			{s = "type";			break;}
		case CodesLexicaux.SYMLIRE: 		{s = "lire";			break;}
		case CodesLexicaux.SYMECRIRE: 		{s = "ecrire";			break;}
		case CodesLexicaux.EGAL: 			{s = "=";				break;}
		case CodesLexicaux.VIRGULE: 		{s = ",";				break;}
		case CodesLexicaux.IDF: 			{s = "identificateur";	break;}
		case CodesLexicaux.CSTECHAINE: 		{s = "chaine de caractere";break;}
		default: {}
		}
		return s;
	}
:};
/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Terminals (tokens returned by the scanner).  
   Terminals that have no value are listed first and then terminals that do have a value, in this 
   case a String value, are listed on the next line down. */

terminal Symbol 	POINTVIRGULE ;
terminal String 	NOMBRE;
terminal Symbol 	OPPLUS;
terminal Symbol 	OPMOINS;
terminal Symbol 	OPMULT;
terminal Symbol 	OPDIFF;
terminal Symbol 	OPEGAL;
terminal Symbol 	OPSUP;
terminal Symbol 	OPINF;
terminal Symbol 	PARO;
terminal Symbol 	PARF;

terminal Symbol		SYMCLASSE;	
terminal Symbol		FIN;	
terminal String		STATUS;	
terminal String		TYPE;	
terminal Symbol		SYMLIRE;	
terminal Symbol		SYMECRIRE;	
terminal Symbol		EGAL;	
terminal Symbol		VIRGULE;
terminal String		IDF;
terminal String		CSTECHAINE;

/* Non terminals used in the grammar section.  
   Non terminals that have an object value are listed first and then non terminals that have an 
   integer value are listed.  An object value means that it can be any type, it isn't set to a 
   specific type.  So it could be an Integer or a String or whatever. */

non terminal Classe						SYSTEME;
non terminal Classe 					CLASSE;
non terminal ArrayList<Declaration>		L_DECL;
non terminal Declaration 				DECLARATION;
non terminal Decl_champ 				DECL_CHAMP;
non terminal Decl_const 				DECL_CONST;
non terminal Instruction 				INSTRUCTION;
non terminal Affect 					AFFECT;
non terminal Lire 						LIRE;
non terminal Ecrire 					ECRIRE;
non terminal ArrayList<String>			L_IDF;

non terminal Expression EXP;

precedence left SYMCLASSE,FIN,STATUS,TYPE,SYMLIRE,SYMECRIRE,EGAL,VIRGULE,IDF,CSTECHAINE;
precedence left OPDIFF, OPEGAL, OPINF, OPSUP;
precedence left OPPLUS , OPMOINS;
precedence left OPMULT ;

/* ----------------------------Grammar Section-------------------- */

start with SYSTEME ;

SYSTEME 		::= CLASSE:c
						{: RESULT = c; :}
				;
		
CLASSE			::= SYMCLASSE IDF:i {: RESULT = new Classe(i); :} L_DECL:ld FIN
						{: RESULT.addListDecl(ld); RESULT.finClass(); :}
				;

L_DECL			::= L_DECL:ld DECLARATION:d
						{: ld.add(d); RESULT = ld; :}
				|	/* empty */
						{: RESULT = new ArrayList<Declaration>(); :}
				;

DECLARATION		::= DECL_CHAMP:d 
						{: RESULT = d; :}
				|	DECL_CONST:d
						{: RESULT = d; :}
				;
				
DECL_CHAMP		::= STATUS:s TYPE:t IDF:i L_IDF:li POINTVIRGULE
						{: RESULT = new Decl_champ(s, t, i); RESULT.addListIdf(li); :}
				;

L_IDF			::= L_IDF:li VIRGULE IDF:i
						{: li.add(i); RESULT = li; :}
				|	/* empty */
						{: RESULT = new ArrayList<String>(); :}
				;

DECL_CONST		::=	DECL_CONST:dc INSTRUCTION:i
						{: dc.addInstruction(i); RESULT = dc; :}
				|	INSTRUCTION:i
						{: RESULT = new Decl_const(i); :}
				;

INSTRUCTION		::= AFFECT:a
						{: RESULT = a; :}
				| 	LIRE:l
						{: RESULT = l; :}
				| 	ECRIRE:e
						{: RESULT = e; :}
				;

AFFECT			::= IDF:i EGAL EXP:e POINTVIRGULE
						{: RESULT = new Affect(i, e); :}
				;

LIRE			::= SYMLIRE IDF:i POINTVIRGULE
						{: RESULT = new Lire(i); :}
				;

ECRIRE			::= SYMECRIRE EXP:e POINTVIRGULE
						{: RESULT = new EcrireExp(e); :}
				|	SYMECRIRE CSTECHAINE:c POINTVIRGULE
						{: RESULT = new EcrireChaine(c); :}
				;
			
EXP				::= NOMBRE:n
						{: RESULT = new Constante(n); :}
				|	IDF:i
						{: RESULT = new Variable(i); :}
				|	PARO EXP:e PARF
						{: RESULT = e; :}
				|	OPMOINS EXP:e
						{: RESULT = new OperatorUnaryMinus(e); :}
				|	EXP:e1 OPPLUS EXP:e2
						{: RESULT = new OperatorPlus(e1,e2); :}
				|	EXP:e1 OPMOINS EXP:e2
						{: RESULT = new OperatorMinus(e1,e2); :}
				|	EXP:e1 OPMULT EXP:e2
						{: RESULT = new OperatorMulti(e1,e2); :}
				|	EXP:e1 OPSUP EXP:e2
						{: RESULT = new OperatorSuperior(e1,e2); :}
				|	EXP:e1 OPINF EXP:e2
						{: RESULT = new OperatorInferior(e1,e2); :}
				|	EXP:e1 OPEGAL EXP:e2
						{: RESULT = new OperatorEquals(e1,e2); :}
				|	EXP:e1 OPDIFF EXP:e2
						{: RESULT = new OperatorDiff(e1,e2); :}
				;
